import csv
import sys

#type into command line on Biowulf:
#python window.py compilation_file.tab cut_site_1 ... cut_site_n
#
#compilation_file.tab = file generated by compilation_filter.py
#cut_site_n = integer position of gRNA cut site
#             (number of nucleotides between 5' end of PCR amplicon and gRNA cut site)
#             *cut sites should be entered in numerical order (5' to 3')


#variable for size of window
#(number of nucleotides to the left and right of cut site to be included in window)
window_size = 10

#list of 5' boundaries of window(s)
lst_window_5 = []
#list of 3' boundaries of window(s)
lst_window_3 = []

#list of sequence(s) included in window(s)
lst_seq = []

#dictionary of reads
#key is sequence(s) included in window
#value is list of read numbers for sequence(s) included in window(s) at different timepoints
dict_reads = {}
#list of zeroes that is used to construct
#list of reads numbers for sequence(s) included in window(s) at different timepoints
lst_zeroes = []

#construct lists of 5' and 3' boundaries of window(s)
for num in range(2,len(sys.argv)):
    lst_window_5.append(int(sys.argv[num]) - window_size)
    lst_window_3.append(int(sys.argv[num]) + window_size)

#open file with compilation of read numbers for whole sequence(s) at different timepoints
with open(sys.argv[1], 'U') as compilation_file:
    reader = csv.reader(compilation_file, delimiter = '\n')

    for i,row in enumerate(reader):

        #save 1st row (timepoints) for column titles
        if i == 0:
            col_titles = row[0]

        #for all later rows with data (sequence, read numbers)
        else:

            #save row as list of sequence, then read numbers for sequence at different timepoints
            row = row[0].split('\t')

            #construct list of sequence(s) included in window
            #join list together and save joined sequence as seq
            for num in range(2,len(sys.argv)):
                lst_seq.append(row[0][lst_window_5[num - 2]:lst_window_3[num - 2]])
            seq = ' '.join(lst_seq)

            #empty list of sequence(s) included in window(s)
            lst_seq = []

            #save list of read numbers for sequence(s) included in window(s) at different timepoints as reads
            reads = row[1:]
            
            #if sequence(s) are not already in dict_reads,
            #add new key to dict_reads equal to the sequence(s) included in the window(s)
            #and change the corresponding value to be equal to
            #a list of the read numbers for the sequence(s) at different timepoints
            if seq not in dict_reads:
                for read in reads:
                    lst_zeroes.append(0)
                dict_reads[seq] = lst_zeroes
                lst_zeroes = []

                for i,read in enumerate(reads):
                    dict_reads[seq][i] = dict_reads[seq][i] + int(read)

            #if sequence(s) are already in dict_reads,
            #update value corresponding to sequence(s) by adding read numbers at each timepoint together
            else:
                for i,read in enumerate(reads):
                    dict_reads[seq][i] = dict_reads[seq][i] + int(read)

#print column titles (timepoints),
#then sequence(s) included in window(s),
#then read numbers for sequence(s) at different timepoints
print col_titles
for seq in dict_reads:
    print seq + '\t' + '\t'.join(map(str,dict_reads[seq]))
